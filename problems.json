[
  {
    "description": "Find the last element of a list.",
    "example": "myLast([1, 2, 3, 4])",
    "result": "4",
    "solution": "var myLast = function(list) {\n  return list.$match(\n    function (x)     { return x },\n    function (_, xs) { return myLast(xs) }\n  )\n}"
  },
  {
    "description": "Find the last but one element of a list.",
    "example": "myButLast([1, 2, 3, 4])",
    "result": "3",
    "solution": "var myButLast = function(list) {\n  return list.$match(\n    function (x, xs) { return xs.length == 1 ? x : myButLast(xs) }\n  )\n}"
  },
  {
    "description": "Find the K'th element of a list. The first element in the list is number 1.",
    "example": "elementAt([1,2,3], 2)",
    "result": "2",
    "solution": "var elementAt = function(list, position) {\n  return list.$match(\n    function (x, xs) { return position == 1 ? x : elementAt(xs, position - 1) }\n  )\n}"
  },
  {
    "description": "Find the number of elements of a list.",
    "example": "myLength([123, 456, 789])",
    "result": "3",
    "solution": "var myLength = function(list) {\n  return list.$match(\n    function ()      { return 0 },\n    function (_, xs) { return 1 + myLength(xs) }\n  )\n}"
  },
  {
    "description": "Reverse a list.",
    "example": "myReverse([1,2,3,4])",
    "result": "[4,3,2,1]",
    "solution": "var myReverse = function(list) {\n  return list.$match(\n    function ()      { return [] },\n    function (x, xs) { return myReverse(xs).concat(x)}\n  )\n}"
  },
  {
    "description": "Find out whether a list is a palindrome. A palindrome can be read forward or backward; e.g. (x a m a x).",
    "example": "isPalindrome [1,2,3]",
    "result": "False",
    "solution": ""
  },
  {
    "description": "Flatten a nested list structure.",
    "example": "myFlatten ((1, ((2, (3, 3), 5))",
    "result": "[1,2,3,4,5]",
    "solution": ""
  },
  {
    "description": "Eliminate consecutive duplicates of list elements. If a list contains repeated elements they should be replaced with a single copy of the element. The order of the elements should not be changed.",
    "example": "compress 'aaaabccaadeeee'",
    "result": "abcade",
    "solution": ""
  },
  {
    "description": "Pack consecutive duplicates of list elements into sublists. If a list contains repeated elements they should be placed in separate sublists.",
    "example": "pack ['a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e']",
    "result": "['aaaa','b','cc','aa','d','eeee']",
    "solution": ""
  },
  {
    "description": "Run-length encoding of a list. Use the result of problem P09 to implement the so-called run-length encoding data compression method. Consecutive duplicates of elements are encoded as lists (N E) where N is the number of duplicates of the element E.",
    "example": "encode 'aaaabccaadeeee'",
    "result": "[(4,'a'),(1,'b'),(2,'c'),(2,'a'),(1,'d'),(4,'e')]",
    "solution": ""
  }

]